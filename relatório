# Relat√≥rio de Teste de Invas√£o - OWASP Juice Shop üîí

Este relat√≥rio apresenta os resultados obtidos com o teste de invas√£o ao Juice shop do tipo e-commerce para a OWASP. As recomenda√ß√µes deste relat√≥rio est√£o estruturadas para permitir a remedia√ß√£o dos riscos de seguran√ßa identificados. Este documento visa a formaliza√ß√£o das a√ß√µes tomadas no referido teste.
Os crit√©rios de avalia√ß√£o de riscos utilizados durante as atividades consideram as descobertas feitas, bem como os crit√©rios de seguran√ßa padr√£o aceitos na √°rea de seguran√ßa.
Este documento recomenda fortemente a revis√£o dos riscos para o neg√≥cio assim como as recomenda√ß√µes de alto n√≠vel para uma melhor compreens√£o dos riscos e quest√µes de seguran√ßa descobertas.


---

## Sum√°rio Executivo üìù

Os testes de penetra√ß√£o na aplica√ß√£o web Juice Shop revelaram vulnerabilidades significativas que comprometem a confidencialidade, integridade e disponibilidade dos dados, al√©m de afetar a autenticidade das a√ß√µes do usu√°rio. As principais descobertas incluem:

* **Vazamento e Manipula√ß√£o de Dados Sens√≠veis:** Possibilidade de acesso e altera√ß√£o de informa√ß√µes de usu√°rios e seus carrinhos de compra atrav√©s de IDs armazenados em tokens JWT.
* **Sequestro de Sess√£o e Acesso N√£o Autorizado:** Falta de valida√ß√£o de dados e autentica√ß√£o prec√°ria permitiram ataques de for√ßa bruta e inje√ß√£o SQL, culminando em acesso n√£o autorizado √† conta de administrador.

Essas vulnerabilidades impactam diretamente os pilares da seguran√ßa:

* **Confidencialidade:** Dados sens√≠veis de usu√°rios e administradores podem ser acessados e expostos.
* **Integridade:** Dados podem ser alterados sem autoriza√ß√£o.
* **Disponibilidade:** Embora n√£o explorados no relat√≥rio, a aplica√ß√£o √© suscet√≠vel a ataques DDoS.
* **Autenticidade:** Falhas na autentica√ß√£o segura dos usu√°rios tornam a aplica√ß√£o vulner√°vel.

### Severidade das Vulnerabilidades üìä

A severidade das vulnerabilidades foi determinada de acordo com os crit√©rios do CVSS3.1.

| Severidade | Quantidade |
| :--------- | :--------- |
| Alta       | 5          |
| M√©dia      | 0          |
| Baixa      | 0          |

---

## Recomenda√ß√µes de Alto N√≠vel üí°

Com base nas descobertas, s√£o urgentemente recomendadas as seguintes a√ß√µes para aprimorar as pr√°ticas de seguran√ßa da aplica√ß√£o:

* **Valida√ß√£o Rigorosa de Dados:** Implementar valida√ß√£o rigorosa na entrada e sa√≠da de dados, juntamente com mecanismos de seguran√ßa para comunica√ß√µes cliente-servidor, criptografando e ocultando o grande volume de informa√ß√µes geradas pelos protocolos HTTP.
* **Fortalecimento da Autentica√ß√£o:** Refor√ßar a seguran√ßa dos mecanismos de autentica√ß√£o, adicionando camadas extras de MFA, implementando pol√≠ticas de senhas fortes, limitando tentativas de login e garantindo que as senhas sejam armazenadas e criptografadas de forma segura utilizando hashing.
* **Gerenciamento de Tokens JWT:** Evitar o uso de IDs sequenciais ou facilmente adivinh√°veis em tokens para manipula√ß√£o de dados, definindo assinaturas para criptografar os tokens JWT.
* **Monitoramento Cont√≠nuo:** Implementar auditorias e monitoramentos cont√≠nuos dos logs de seguran√ßa, registrando eventos importantes e buscando meios de mitigar novas vulnerabilidades.
* **Conformidade OWASP Top 10:** Definir regras baseadas no OWASP Top 10, priorizando autentica√ß√£o e prote√ß√£o de dados sens√≠veis.

---

## Ferramentas Utilizadas üõ†Ô∏è

As seguintes ferramentas foram empregadas durante os testes:
* VMBox
* Kali Linux
* Burp Suite
* Docker

---

## Metodologia üìñ

Foram aplicadas metodologias e padr√µes reconhecidos na √°rea de seguran√ßa cibern√©tica:

* OWASP Testing Guide
* OWASP Top 10 Application Security Risks - 2021

---

## Detalhes T√©cnicos das Descobertas 

### 1. Business Logic Errors (Erros de L√≥gica de Neg√≥cio)

* **Severidade (CVSS3.1):** 8.1 (Alta)
* **CWE:** CWE-840
* **Localiza√ß√£o:** `http://localhost:3000/#/wallet`
* **Descri√ß√£o:** Utilizando o Burp Suite, foi poss√≠vel capturar e modificar requisi√ß√µes HTTP relacionadas ao dep√≥sito de moeda virtual. Isso permitiu a inser√ß√£o de valores absurdos na carteira digital para realizar compras na plataforma de e-commerce.
* **Evid√™ncias:** Ao interceptar o protocolo POST para a quantidade depositada na carteira digital, o valor foi alterado, e o mesmo ID da transa√ß√£o foi reutilizado para validar o novo valor. Isso demonstra que a aplica√ß√£o confiava apenas no ID da transa√ß√£o para validar o dep√≥sito, sem verificar a consist√™ncia do valor ou a autenticidade da altera√ß√£o.
Como segue o exemplo da imagem abaixo:
[img.png]
* **Recomenda√ß√µes:**
    * Implementar valida√ß√£o do lado do servidor para todos os valores de transa√ß√£o.
    * Verificar a consist√™ncia entre o ID da transa√ß√£o e o valor associado.
    * Adicionar mecanismos de controle de integridade para evitar adultera√ß√µes.
    * Monitoramento constante de poss√≠veis suspeitas no sistema.

### 2. Improper Restriction of Excessive Authentication Attempts (Restri√ß√£o Impr√≥pria de Tentativas Excessivas de Autentica√ß√£o)

* **Severidade (CVSS3.1):** 8.3 (Alta)
* **CWE:** CWE-307
* **Localiza√ß√£o:** `http://localhost:3000/#/login`
* **Descri√ß√£o:** A ferramenta Burp Suite foi utilizada para realizar um ataque de for√ßa bruta contra usu√°rios do Juice Shop, utilizando uma wordlist de senhas e e-mail encontradas na pr√≥pria aplica√ß√£o web. A aus√™ncia de mecanismos que restrinjam as tentativas de login facilitou este ataque.
* **Evid√™ncias:** Primeiro foi realizado uma intera√ß√£o com aplica√ß√£o web para capturar a requisi√ß√£o HTTP POST respons√°vel por enviar autentica√ß√£o ao sistema, em seguida, usando a ferramenta Burp Suite, foi inicializado um ataque de for√ßa bruta com uma wordlist com senhas e e-mails de usu√°rios.
 [img.png]
status code 200 para a combina√ß√£o "admin" e "admin123" (Payload 1: "admin", Payload 2: "admin123") indica um login bem-sucedido, confirmando a vulnerabilidade. Isso permitiu o acesso como administrador.
 [img.png]
* **Recomenda√ß√µes:**
    * Utiliza√ß√£o de captchas.
    * Bloqueio de IP ou origem ap√≥s um n√∫mero pr√©-definido de tentativas falhas.
    * Autentica√ß√£o MFA.

### 3. Generation of Incorrect Security (Gera√ß√£o de Seguran√ßa Incorreta)

* **Severidade (CVSS3.1):** 7.1 (Alta)
* **CWE:** CWE-1270
* **Localiza√ß√£o:** `http://localhost:3000/#/profile`
* **Descri√ß√£o:**  O ataque visou o usu√°rio com ID 2. Foi poss√≠vel modificar o token JWT para remover sua assinatura digital e alterar o nome de usu√°rio atrav√©s de uma requisi√ß√£o POST. A falta de valida√ß√£o da assinatura permitiu essa adultera√ß√£o.
* **Evid√™ncias:** O token JWT foi descriptografado e alterado para n√£o possuir assinatura digital ("alg":"none") e foi manipulado o seu id (‚Äúid‚Äù:2)
 [img.png]
A requisi√ß√£o POST para /profile recebe o token adulterado e o nome do usu√°rio √© alterado com sucesso para ‚Äúhackeando2‚Äù. 
 [img.png]
Ap√≥s realizar o ataque, vemos que o nome do usu√°rio foi alterado sem o seu consentimento.
 [img.png]
* **Recomenda√ß√µes:**
    * O token deve ser sempre validado com o algoritmo definido na aplica√ß√£o.
    * Implementar assinaturas criptogr√°ficas robustas para todos os tokens JWT.
    * Verificar a assinatura antes de processar qualquer informa√ß√£o contida no token.

### 4. Authorization Bypass Through User-Controlled Key (Bypass de Autoriza√ß√£o Atrav√©s de Chave Controlada pelo Usu√°rio)

* **Severidade (CVSS3.1):** 7.1 (Alta)
* **CWE:** CWE-636
* **Localiza√ß√£o:** `http://localhost:3000/#/basket`
* **Descri√ß√£o:** O teste focou em obter controle sobre as depend√™ncias de compras de um usu√°rio alvo. O ID do carrinho de compras foi descoberto por meio de um ataque de intrus√£o com uma lista num√©rica simples, indicando que os IDs seguiam um padr√£o facilmente adivinh√°vel.
* **Evid√™ncias:* A imagem abaixo representa o carrinho de compras antes do ataque e possuindo apenas um produto de ID 4. 
 [img.png]
Ap√≥s intera√ß√£o com o usu√°rio logado na aplica√ß√£o, √© capturado a requisi√ß√£o POST respons√°vel por adicionar os itens atrav√©s de um JSON. 
O sistema de seguran√ßa analisa o JSON, mas n√£o v√°lida m√∫ltiplos par√¢metros contendo o valor do BasketID e por essa raz√£o duplicamos essa informa√ß√£o, sendo o primeiro usado para passar pelo teste de valida√ß√£o e o segundo para ser o alvo da adultera√ß√£o indevida. 
 [img.png]
Status do carrinho de compras depois de inserir 5 produtos em sua cesta sem o consentimento do usu√°rio. 
 [img.png]
* **Recomenda√ß√µes:**
    * Verificar a autoriza√ß√£o de acesso do usu√°rio a um objeto.
    * Utilizar IDs imprevis√≠veis (GUIDs/UUIDs) para identificadores de recursos sens√≠veis.
    * Implementar verifica√ß√µes de permiss√£o baseadas na sess√£o do usu√°rio e n√£o apenas em IDs de recursos.

### 5. SQL Injection

* **Severidade (CVSS3.1):** 8.1 (Alta)
* **CWE:** CWE-89
* **Localiza√ß√£o:** `http://localhost:3000/#/login`
* **Descri√ß√£o:** Uma inje√ß√£o SQL na √°rea de login permitiu burlar a autentica√ß√£o por senha e adquirir acesso n√£o autorizado √† primeira conta de usu√°rio registrada (administrador).
* **Evid√™ncias:* O c√≥digo SQL √© inserido na √°rea de login para manipular a l√≥gica de consulta do banco de dados e adquirir acesso n√£o autorizado √† primeira conta de usu√°rio registrada, no caso a seguir, √© o administrador. 
 [img.png] 
* **Recomenda√ß√µes:**
    * Utilizar consultas parametrizadas (prepared statements) para todas as intera√ß√µes com o banco de dados. Isso garante que a entrada do usu√°rio seja tratada como dados e n√£o como c√≥digo SQL.
    * Implementar valida√ß√£o de entrada rigorosa para todos os campos que interagem com o banco de dados.
    * Evitar a concatena√ß√£o direta de strings de entrada do usu√°rio em consultas SQL.
